//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18408.
// 
#pragma warning disable 1591

namespace CAOP.RISK {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GetRiskSoap", Namespace="http://tempuri.org/")]
    public partial class GetRisk : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetRiskScoreOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GetRisk() {
            this.Url = global::CAOP.Properties.Settings.Default.CAOP_RISK_GetRisk;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetRiskScoreCompletedEventHandler GetRiskScoreCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRiskScore", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRiskScore(
                    string BrCode, 
                    string CustomerIdNumber, 
                    string CNIC, 
                    string CustomerType, 
                    string CustomerTitle, 
                    string CustomerFirstName, 
                    string CustomerMiddleName, 
                    string CustomerLastName, 
                    string LegalName, 
                    string InstituteName, 
                    string InstituteStartDate, 
                    string Gender, 
                    string DateOfBirth, 
                    string Industry, 
                    string TaxIdentifierFormat, 
                    string TaxIdentificationNumber, 
                    string Occupation, 
                    string CustomerCreationDate, 
                    string ResidenceCountry, 
                    string PrimaryCitznCountry, 
                    string SecondryCitznCountry, 
                    string DocumetsVerifiedFlag, 
                    string Jurisdiction, 
                    string CountryOfRelationship, 
                    string RelationType, 
                    string AddressType, 
                    string AddressLine1, 
                    string AddressLine2, 
                    string AddressLine3, 
                    string AddressLine4, 
                    string AddressLine5, 
                    string AddressLine6, 
                    string City, 
                    string State, 
                    string Region, 
                    string PostalCode, 
                    string AddressCountry, 
                    string PhoneType, 
                    string Zmobile, 
                    string HPH, 
                    string BPH, 
                    string PhoneExtension, 
                    string SourceType, 
                    string Currency, 
                    string Role, 
                    string RelationDefn, 
                    string ParentCustomerNumber, 
                    string ServiceCall) {
            object[] results = this.Invoke("GetRiskScore", new object[] {
                        BrCode,
                        CustomerIdNumber,
                        CNIC,
                        CustomerType,
                        CustomerTitle,
                        CustomerFirstName,
                        CustomerMiddleName,
                        CustomerLastName,
                        LegalName,
                        InstituteName,
                        InstituteStartDate,
                        Gender,
                        DateOfBirth,
                        Industry,
                        TaxIdentifierFormat,
                        TaxIdentificationNumber,
                        Occupation,
                        CustomerCreationDate,
                        ResidenceCountry,
                        PrimaryCitznCountry,
                        SecondryCitznCountry,
                        DocumetsVerifiedFlag,
                        Jurisdiction,
                        CountryOfRelationship,
                        RelationType,
                        AddressType,
                        AddressLine1,
                        AddressLine2,
                        AddressLine3,
                        AddressLine4,
                        AddressLine5,
                        AddressLine6,
                        City,
                        State,
                        Region,
                        PostalCode,
                        AddressCountry,
                        PhoneType,
                        Zmobile,
                        HPH,
                        BPH,
                        PhoneExtension,
                        SourceType,
                        Currency,
                        Role,
                        RelationDefn,
                        ParentCustomerNumber,
                        ServiceCall});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRiskScoreAsync(
                    string BrCode, 
                    string CustomerIdNumber, 
                    string CNIC, 
                    string CustomerType, 
                    string CustomerTitle, 
                    string CustomerFirstName, 
                    string CustomerMiddleName, 
                    string CustomerLastName, 
                    string LegalName, 
                    string InstituteName, 
                    string InstituteStartDate, 
                    string Gender, 
                    string DateOfBirth, 
                    string Industry, 
                    string TaxIdentifierFormat, 
                    string TaxIdentificationNumber, 
                    string Occupation, 
                    string CustomerCreationDate, 
                    string ResidenceCountry, 
                    string PrimaryCitznCountry, 
                    string SecondryCitznCountry, 
                    string DocumetsVerifiedFlag, 
                    string Jurisdiction, 
                    string CountryOfRelationship, 
                    string RelationType, 
                    string AddressType, 
                    string AddressLine1, 
                    string AddressLine2, 
                    string AddressLine3, 
                    string AddressLine4, 
                    string AddressLine5, 
                    string AddressLine6, 
                    string City, 
                    string State, 
                    string Region, 
                    string PostalCode, 
                    string AddressCountry, 
                    string PhoneType, 
                    string Zmobile, 
                    string HPH, 
                    string BPH, 
                    string PhoneExtension, 
                    string SourceType, 
                    string Currency, 
                    string Role, 
                    string RelationDefn, 
                    string ParentCustomerNumber, 
                    string ServiceCall) {
            this.GetRiskScoreAsync(BrCode, CustomerIdNumber, CNIC, CustomerType, CustomerTitle, CustomerFirstName, CustomerMiddleName, CustomerLastName, LegalName, InstituteName, InstituteStartDate, Gender, DateOfBirth, Industry, TaxIdentifierFormat, TaxIdentificationNumber, Occupation, CustomerCreationDate, ResidenceCountry, PrimaryCitznCountry, SecondryCitznCountry, DocumetsVerifiedFlag, Jurisdiction, CountryOfRelationship, RelationType, AddressType, AddressLine1, AddressLine2, AddressLine3, AddressLine4, AddressLine5, AddressLine6, City, State, Region, PostalCode, AddressCountry, PhoneType, Zmobile, HPH, BPH, PhoneExtension, SourceType, Currency, Role, RelationDefn, ParentCustomerNumber, ServiceCall, null);
        }
        
        /// <remarks/>
        public void GetRiskScoreAsync(
                    string BrCode, 
                    string CustomerIdNumber, 
                    string CNIC, 
                    string CustomerType, 
                    string CustomerTitle, 
                    string CustomerFirstName, 
                    string CustomerMiddleName, 
                    string CustomerLastName, 
                    string LegalName, 
                    string InstituteName, 
                    string InstituteStartDate, 
                    string Gender, 
                    string DateOfBirth, 
                    string Industry, 
                    string TaxIdentifierFormat, 
                    string TaxIdentificationNumber, 
                    string Occupation, 
                    string CustomerCreationDate, 
                    string ResidenceCountry, 
                    string PrimaryCitznCountry, 
                    string SecondryCitznCountry, 
                    string DocumetsVerifiedFlag, 
                    string Jurisdiction, 
                    string CountryOfRelationship, 
                    string RelationType, 
                    string AddressType, 
                    string AddressLine1, 
                    string AddressLine2, 
                    string AddressLine3, 
                    string AddressLine4, 
                    string AddressLine5, 
                    string AddressLine6, 
                    string City, 
                    string State, 
                    string Region, 
                    string PostalCode, 
                    string AddressCountry, 
                    string PhoneType, 
                    string Zmobile, 
                    string HPH, 
                    string BPH, 
                    string PhoneExtension, 
                    string SourceType, 
                    string Currency, 
                    string Role, 
                    string RelationDefn, 
                    string ParentCustomerNumber, 
                    string ServiceCall, 
                    object userState) {
            if ((this.GetRiskScoreOperationCompleted == null)) {
                this.GetRiskScoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRiskScoreOperationCompleted);
            }
            this.InvokeAsync("GetRiskScore", new object[] {
                        BrCode,
                        CustomerIdNumber,
                        CNIC,
                        CustomerType,
                        CustomerTitle,
                        CustomerFirstName,
                        CustomerMiddleName,
                        CustomerLastName,
                        LegalName,
                        InstituteName,
                        InstituteStartDate,
                        Gender,
                        DateOfBirth,
                        Industry,
                        TaxIdentifierFormat,
                        TaxIdentificationNumber,
                        Occupation,
                        CustomerCreationDate,
                        ResidenceCountry,
                        PrimaryCitznCountry,
                        SecondryCitznCountry,
                        DocumetsVerifiedFlag,
                        Jurisdiction,
                        CountryOfRelationship,
                        RelationType,
                        AddressType,
                        AddressLine1,
                        AddressLine2,
                        AddressLine3,
                        AddressLine4,
                        AddressLine5,
                        AddressLine6,
                        City,
                        State,
                        Region,
                        PostalCode,
                        AddressCountry,
                        PhoneType,
                        Zmobile,
                        HPH,
                        BPH,
                        PhoneExtension,
                        SourceType,
                        Currency,
                        Role,
                        RelationDefn,
                        ParentCustomerNumber,
                        ServiceCall}, this.GetRiskScoreOperationCompleted, userState);
        }
        
        private void OnGetRiskScoreOperationCompleted(object arg) {
            if ((this.GetRiskScoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRiskScoreCompleted(this, new GetRiskScoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetRiskScoreCompletedEventHandler(object sender, GetRiskScoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRiskScoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRiskScoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591